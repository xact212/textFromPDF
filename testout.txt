Page 40[DO NOT INCLUDE PAGE # IN FULL TEXT]
A property name is always a string. If the name doesn’t follow the rules of
an identifier, quote it in an object literal:
let harry = { name: 'Harry Smith', 'favorite beer' : 'IPA' }
To access such a property, you cannot use the dot notation. Use brackets
instead:
harry['favorite beer'] = 'Lager'
Such property names are not common, but they can sometimes be convenient.
For example, you can have an object whose property names are file names
and whose property values are the contents of those files.
CAUTION: There are parsing situations where an opening brace can
indicate an object literal or a block statement. In those cases, the block
statement takes precedence. For example, if you type
{} - 1
into the browser console or Node.js, the empty block is executed. Then,
the expression - 1is evaluated and displayed.
In contrast, in the expression
1 - {}
{}is an empty object that is converted to NaN. Then the result (also NaN)
is displayed.
This ambiguity doesn’t normally occur in practical programs. When you
form an object literal, you usually store it in a variable, pass it as an
argument, or return it as a result. In all those situations, the parser would
not expect a block.
If you ever have a situation where an object literal is falsely parsed as
a block, the remedy is simple: Enclose the object literal in parentheses.
You will see an example in Section 1.16, “Destructuring” (page 21).
1.14 Arrays
In JavaScript, an array is simply an object whose property names are the
strings '0', '1', '2', and so on. (Strings are used because numbers can’t be
property names.)
You can declare array literals by enclosing their elements in square brackets:
const numbers = [1, 2, 3, 'many']
This is an object with five properties: '0', '1', '2', '3', and 'length'.Chapter1 ValuesandVariables18
Page 41[DO NOT INCLUDE PAGE # IN FULL TEXT]
The length property is one more than the highest index, converted to a number.
The value of numbers.length is the number 4.
You need to use the bracket notation to access the first four properties:
numbers['1']  is 2. For your convenience, the argument inside the brackets is
automatically converted to a string. You can use numbers[1] instead, which gives
you the illusion of working with an array in a language such as Java or C++.
Note that the element types in an array don
’t need to match. The numbers array
contains three numbers and a string.
An array can have missing elements:
const someNumbers = [ , 2, , 9] // No properties '0', '2'
As with any object, a nonexistent property has the value undefined. For example,
someNumbers[0]  and someNumbers[6] are undefined.
You can add new elements past the end:
someNumbers[6] = 11 // Now someNumbers has length 7
Note that, as with all objects, you can change the properties of an array that
is referenced by a const variable.
NOTE:Atrailingcomma does notindicate a missing element. For
example, [1, 2, 7, 9,] has four elements, and the highest index is 3. As
with object literals, trailing commas are intended for literals that may be
expanded over time, such as:
const developers = [
  'Harry Smith',
  'Sally Lee',
  // Add more elements above
]
Since arrays are objects, you can add arbitrary properties:
numbers.lucky = true
This is not common, but it is perfectly valid JavaScript.
The typeof operator returns 'object' for an array. To test whether an object is
an array, call Array.isArray(obj).
When an array needs to be converted to a string, all elements are turned
into strings and joined with commas. For example,
'' + [1, 2, 3]
is the string '1,2,3'.191.14Arrays
